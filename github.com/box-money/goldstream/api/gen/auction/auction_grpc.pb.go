// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: auction.proto

package auction

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuctionServiceClient is the client API for AuctionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuctionServiceClient interface {
	// BidStream is a bidirectional stream for placing bids and receiving server events.
	BidStream(ctx context.Context, opts ...grpc.CallOption) (AuctionService_BidStreamClient, error)
}

type auctionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuctionServiceClient(cc grpc.ClientConnInterface) AuctionServiceClient {
	return &auctionServiceClient{cc}
}

func (c *auctionServiceClient) BidStream(ctx context.Context, opts ...grpc.CallOption) (AuctionService_BidStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &AuctionService_ServiceDesc.Streams[0], "/auction.AuctionService/BidStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &auctionServiceBidStreamClient{stream}
	return x, nil
}

type AuctionService_BidStreamClient interface {
	Send(*BidRequest) error
	Recv() (*ServerStreamMessage, error)
	grpc.ClientStream
}

type auctionServiceBidStreamClient struct {
	grpc.ClientStream
}

func (x *auctionServiceBidStreamClient) Send(m *BidRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *auctionServiceBidStreamClient) Recv() (*ServerStreamMessage, error) {
	m := new(ServerStreamMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AuctionServiceServer is the server API for AuctionService service.
// All implementations must embed UnimplementedAuctionServiceServer
// for forward compatibility
type AuctionServiceServer interface {
	// BidStream is a bidirectional stream for placing bids and receiving server events.
	BidStream(AuctionService_BidStreamServer) error
	mustEmbedUnimplementedAuctionServiceServer()
}

// UnimplementedAuctionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAuctionServiceServer struct {
}

func (UnimplementedAuctionServiceServer) BidStream(AuctionService_BidStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method BidStream not implemented")
}
func (UnimplementedAuctionServiceServer) mustEmbedUnimplementedAuctionServiceServer() {}

// UnsafeAuctionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuctionServiceServer will
// result in compilation errors.
type UnsafeAuctionServiceServer interface {
	mustEmbedUnimplementedAuctionServiceServer()
}

func RegisterAuctionServiceServer(s grpc.ServiceRegistrar, srv AuctionServiceServer) {
	s.RegisterService(&AuctionService_ServiceDesc, srv)
}

func _AuctionService_BidStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AuctionServiceServer).BidStream(&auctionServiceBidStreamServer{stream})
}

type AuctionService_BidStreamServer interface {
	Send(*ServerStreamMessage) error
	Recv() (*BidRequest, error)
	grpc.ServerStream
}

type auctionServiceBidStreamServer struct {
	grpc.ServerStream
}

func (x *auctionServiceBidStreamServer) Send(m *ServerStreamMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *auctionServiceBidStreamServer) Recv() (*BidRequest, error) {
	m := new(BidRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AuctionService_ServiceDesc is the grpc.ServiceDesc for AuctionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuctionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auction.AuctionService",
	HandlerType: (*AuctionServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "BidStream",
			Handler:       _AuctionService_BidStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "auction.proto",
}
